-- Services
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Debris = game:GetService("Debris")
local Players = game:GetService("Players")

-- Configuration
local TARGET_KILLER_NAME = "1x1x1x1"

-- Animation IDs to detect
local MASS_INFECTION_ID = "131430497821198"
local ENTANGLEMENT_ID = "119181003138006"

local SHUTDOWN_KEY = Enum.KeyCode.P
local DEBUG = true -- Set to false to disable detailed debug output

-- State
local running = true
local connections = {}
local LocalPlayer = Players.LocalPlayer
local monitoredCharacters = setmetatable({}, { __mode = "k" })

-- Main shutdown function
local function shutdown()
    if not running then return end
    running = false
    
    print("Animation detection script shutting down.")
    
    for _, connection in ipairs(connections) do
        connection:Disconnect()
    end
    connections = {} -- Clear connections table
end

-- Debug print helper
local function debugPrint(...)
    if DEBUG then
        print("[DEBUG]", ...)
    end
end

-- Normalize asset id string to its numeric id
local function normalizeAssetId(idStr)
    if type(idStr) ~= "string" then return nil end
    return string.match(idStr, "%d+")
end

-- Helper: find character root part
local function findRootPart(character)
    if not character then return nil end
    
    -- Try common root part names
    local root = character:FindFirstChild("HumanoidRootPart") 
                or character:FindFirstChild("Torso") 
                or character:FindFirstChild("UpperTorso")
                or character:FindFirstChild("Head")
    
    if root then
        debugPrint("  Found root part:", root.Name)
        return root
    end
    
    -- If no standard root found, look for any BasePart that could serve as anchor
    for _, child in ipairs(character:GetChildren()) do
        if child:IsA("BasePart") then
            debugPrint("  Using fallback root part:", child.Name)
            return child
        end
    end
    
    return nil
end

-- Function factory: creates an animation handler for a specific character
local function createAnimationHandler(character)
    return function(animationTrack)
        debugPrint("Animation played detected")
        debugPrint("  Animation object:", animationTrack.Animation)
        debugPrint("  Animation ID:", animationTrack.Animation.AnimationId)
        
        local playedId = normalizeAssetId(animationTrack.Animation.AnimationId)
        debugPrint("  Normalized ID:", playedId)
        debugPrint("  Mass Infection ID:", MASS_INFECTION_ID)
        debugPrint("  Entanglement ID:", ENTANGLEMENT_ID)
        
        local isMassInfection = (playedId == MASS_INFECTION_ID)
        local isEntanglement = (playedId == ENTANGLEMENT_ID)
        
        if isMassInfection or isEntanglement then
            local animationName = isMassInfection and "MASS INFECTION" or "ENTANGLEMENT"
            print("✓ TARGET ANIMATION DETECTED:", animationName)
            print("  Character:", character.Name)
            print("  Character path:", character:GetFullName())
            
            local root = findRootPart(character)
            debugPrint("  Root part search result:", root)
            
            if not root then 
                warn("✗ Cannot create blocks: No root part found!")
                debugPrint("  Character children:")
                for _, child in ipairs(character:GetChildren()) do
                    debugPrint("    -", child.Name, "(" .. child.ClassName .. ")")
                end
                return 
            end
            
            -- Compute forward (flattened on XZ plane)
            local look = root.CFrame.LookVector
            debugPrint("  Root position:", root.Position)
            debugPrint("  Root LookVector:", look)
            
            local flatLook = Vector3.new(look.X, 0, look.Z)
            debugPrint("  Flattened LookVector:", flatLook)
            debugPrint("  Flattened magnitude:", flatLook.Magnitude)
            
            if flatLook.Magnitude > 0 then
                flatLook = flatLook.Unit
            else
                flatLook = look
            end
            debugPrint("  Final forward direction:", flatLook)
            
            -- Determine block sizes and duration based on animation type
            local shortSize, longSize, duration
            if isMassInfection then
                shortSize = Vector3.new(10, 5, 11)
                longSize = Vector3.new(10, 5, 600)
                duration = 10
            else -- Entanglement
                shortSize = Vector3.new(6, 1.8, 5)
                longSize = Vector3.new(6, 1.8, 600)
                duration = 4
            end
            
            -- Create a short block in front of killer
            local shortBlock = Instance.new("Part")
            shortBlock.Name = "KillerShortBlock"
            shortBlock.Size = shortSize
            shortBlock.Anchored = true
            shortBlock.CanCollide = false
            shortBlock.Material = Enum.Material.ForceField
            shortBlock.Color = Color3.fromRGB(255, 0, 0)
            shortBlock.Transparency = 0.5
            local shortPos = root.Position + flatLook * (shortBlock.Size.Z / 2)
            shortBlock.CFrame = CFrame.new(shortPos, shortPos + flatLook)
            shortBlock.Parent = workspace
            
            print("✓ Created SHORT block (" .. shortSize.X .. "x" .. shortSize.Y .. "x" .. shortSize.Z .. ") - Duration: " .. duration .. "s")
            debugPrint("  Short block position:", shortPos)
            debugPrint("  Short block CFrame:", shortBlock.CFrame)
            debugPrint("  Short block parent:", shortBlock.Parent)
            
            Debris:AddItem(shortBlock, duration)
            
            -- Create a long block facing killer forward
            local longBlock = Instance.new("Part")
            longBlock.Name = "KillerLongBlock"
            longBlock.Size = longSize
            longBlock.Anchored = true
            longBlock.CanCollide = false
            longBlock.Material = Enum.Material.ForceField
            longBlock.Color = Color3.fromRGB(255, 0, 0)
            longBlock.Transparency = 0.5
            local longPos = root.Position + flatLook * (longBlock.Size.Z / 2)
            longBlock.CFrame = CFrame.new(longPos, longPos + flatLook)
            longBlock.Parent = workspace
            
            print("✓ Created LONG block (" .. longSize.X .. "x" .. longSize.Y .. "x" .. longSize.Z .. ") - Duration: " .. duration .. "s")
            debugPrint("  Long block position:", longPos)
            debugPrint("  Long block CFrame:", longBlock.CFrame)
            debugPrint("  Long block parent:", longBlock.Parent)
            
            Debris:AddItem(longBlock, duration)
            
            -- Sound that plays while local player is inside either block
            local sound = Instance.new("Sound")
            sound.Name = "AlertSound"
            sound.SoundId = getcustomasset("forvids/sfx/tetrio/hyperalert.ogg")
            sound.Volume = 6
            sound.Looped = false
            sound.Parent = longBlock
            
            local soundPlaying = false
            local lastPlayed = 0
            
            -- Warning GUI that shows when local player is inside either block
            local warnGui = nil
            local function createWarningGui()
                if warnGui and warnGui.Parent then return end
                
                local gui = Instance.new("ScreenGui")
                gui.Name = animationName .. "Warn"
                gui.IgnoreGuiInset = true
                gui.ResetOnSpawn = false
                gui.ZIndexBehavior = Enum.ZIndexBehavior.Global
                gui.Parent = LocalPlayer:WaitForChild("PlayerGui")
                
                -- center label (the actual warning)
                local warn = Instance.new("TextLabel")
                warn.AnchorPoint = Vector2.new(0.5,0.5)
                warn.Position = UDim2.fromScale(0.5,0.5)
                warn.Size = UDim2.fromScale(0.7,0.15)
                warn.BackgroundTransparency = 1
                warn.Text = isMassInfection and "MASS INFECTION WARN" or "ENTANGLEMENT WARN"
                warn.TextScaled = true
                warn.Font = Enum.Font.GothamBlack
                warn.TextColor3 = Color3.fromRGB(255,0,25)
                warn.Parent = gui
                
                local stroke = Instance.new("UIStroke")
                stroke.Thickness = 2
                stroke.Color = Color3.new(0,0,0)
                stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Contextual
                stroke.Parent = warn
                
                -- subtle flash behind text (not screen-wide)
                local flash = Instance.new("Frame")
                flash.AnchorPoint = Vector2.new(0.5,0.5)
                flash.Position = warn.Position
                flash.Size = UDim2.fromScale(0.65,0.14)
                flash.BackgroundColor3 = Color3.fromRGB(255,0,25)
                flash.BackgroundTransparency = 0.8
                flash.Parent = gui
                
                -- caution stripe thin bar above and below
                local stripeTop = Instance.new("Frame")
                stripeTop.Size = UDim2.new(1,0,0,6)
                stripeTop.Position = UDim2.new(0,0,0.5,-50)
                stripeTop.BackgroundColor3 = Color3.fromRGB(255,0,25)
                stripeTop.BackgroundTransparency = 0.4
                stripeTop.Parent = gui
                
                local stripeBottom = stripeTop:Clone()
                stripeBottom.Position = UDim2.new(0,0,0.5,50)
                stripeBottom.Parent = gui
                
                -- flash animation
                task.spawn(function()
                    while gui.Parent do
                        game:GetService("TweenService"):Create(flash, TweenInfo.new(0.45), {BackgroundTransparency = 0.4}):Play()
                        task.wait(0.45)
                        game:GetService("TweenService"):Create(flash, TweenInfo.new(0.45), {BackgroundTransparency = 0.85}):Play()
                        task.wait(0.45)
                    end
                end)
                
                -- slight pulse
                task.spawn(function()
                    local t = 0
                    while gui.Parent do
                        t += RunService.Heartbeat:Wait()
                        local s = 1 + math.sin(t*4)*0.08
                        warn.Size = UDim2.fromScale(0.7*s,0.15*s)
                    end
                end)
                
                warnGui = gui
            end
            
            local function destroyWarningGui()
                if warnGui and warnGui.Parent then
                    warnGui:Destroy()
                    warnGui = nil
                end
            end
            
            local function isLocalPlayerInside(part)
                if not LocalPlayer or not LocalPlayer.Character then return false end
                if not part or not part.Parent then return false end
                local touchingParts = workspace:GetPartsInPart(part)
                for _, p in ipairs(touchingParts) do
                    if p:IsDescendantOf(LocalPlayer.Character) then
                        return true
                    end
                end
                return false
            end
            
            -- Keybind to destroy warning GUI and sound (P key)
            local UserInputService = game:GetService("UserInputService")
            UserInputService.InputBegan:Connect(function(input, gameProcessed)
                if gameProcessed then return end
                if input.KeyCode == Enum.KeyCode.P then
                    destroyWarningGui()
                    if sound and sound.Parent then
                        sound:Stop()
                        soundPlaying = false
                    end
                end
            end)
            
            -- Track static block state (Shockwave for Mass Infection, Swords for Entanglement)
            local staticBlockDetected = false
            local staticBlockDirection = nil
            local staticBlock = nil
            local staticBlockDetectedTime = 0
            local staticBlockFreezeDuration = 5.5
            
            -- Monitor for static block spawn (Shockwave or Swords)
            local staticBlockConnection
            local function checkForStaticBlock()
                local mapPath = workspace:FindFirstChild("Map")
                if mapPath then
                    local ingame = mapPath:FindFirstChild("Ingame")
                    if ingame then
                        -- Check for Mass Infection's Shockwave or Entanglement's Swords
                        local staticObject = nil
                        local objectName = ""
                        
                        if isMassInfection then
                            staticObject = ingame:FindFirstChild("Shockwave")
                            objectName = "SHOCKWAVE"
                        else -- Entanglement
                            staticObject = ingame:FindFirstChild("Swords")
                            objectName = "SWORDS"
                        end
                        
                        if staticObject and not staticBlockDetected then
                            staticBlockDetected = true
                            staticBlockDetectedTime = os.clock()
                            print("🔍 " .. objectName .. " FOUND! Object type:", staticObject.ClassName)
                            
                            -- Find the part in the object (Model or BasePart)
                            local objectPart = nil
                            if staticObject:IsA("Model") then
                                -- For Swords Model, specifically look for "Core" part
                                if not isMassInfection then
                                    objectPart = staticObject:FindFirstChild("Core")
                                    if objectPart then
                                        print("  ✓ Found Swords.Core part!")
                                    else
                                        print("  ⚠️ Swords.Core not found, trying fallback...")
                                        objectPart = staticObject.PrimaryPart or staticObject:FindFirstChildWhichIsA("BasePart")
                                    end
                                else
                                    objectPart = staticObject.PrimaryPart or staticObject:FindFirstChildWhichIsA("BasePart")
                                end
                                print("  " .. objectName .. " is a Model, using part:", objectPart and objectPart.Name or "nil")
                            elseif staticObject:IsA("BasePart") then
                                objectPart = staticObject
                                print("  " .. objectName .. " is a BasePart")
                            end
                            
                            if not objectPart then
                                print("  ⚠️ Could not find a part in " .. objectName .. " model")
                                staticBlockDetected = false -- Reset so it can try again
                                return
                            end
                            
                            if isMassInfection then
                                -- Mass Infection: Destroy lookvector blocks and replace with static block
                                print("🌊 SHOCKWAVE DETECTED! Destroying lookvector blocks and creating static block...")
                                
                                if shortBlock and shortBlock.Parent then
                                    shortBlock:Destroy()
                                    print("✓ Destroyed SHORT lookvector block")
                                end
                                if longBlock and longBlock.Parent then
                                    longBlock:Destroy()
                                    print("✓ Destroyed LONG lookvector block")
                                end
                                
                                -- Get velocity direction for static block
                                local velocity = objectPart.AssemblyLinearVelocity
                                if velocity.Magnitude > 0.1 then
                                    staticBlockDirection = Vector3.new(velocity.X, 0, velocity.Z).Unit
                                    print("  Using " .. objectName .. " velocity direction:", staticBlockDirection)
                                else
                                    staticBlockDirection = Vector3.new(objectPart.CFrame.LookVector.X, 0, objectPart.CFrame.LookVector.Z).Unit
                                    print("  Using " .. objectName .. " CFrame direction (fallback):", staticBlockDirection)
                                end
                                
                                -- Create static tracking block
                                if character then
                                    local killerRoot = character:FindFirstChild("HumanoidRootPart")
                                    if killerRoot then
                                        staticBlock = Instance.new("Part")
                                        staticBlock.Name = objectName .. "TrackingBlock"
                                        staticBlock.Size = longSize -- Use the same size as longBlock
                                        staticBlock.Anchored = true
                                        staticBlock.CanCollide = false
                                        staticBlock.Material = Enum.Material.ForceField
                                        staticBlock.Color = Color3.fromRGB(0, 255, 255) -- Cyan color
                                        staticBlock.Transparency = 0.5
                                        
                                        local rootPos = killerRoot.Position
                                        local blockPos = rootPos + staticBlockDirection * (staticBlock.Size.Z / 2)
                                        staticBlock.CFrame = CFrame.new(blockPos, blockPos + staticBlockDirection)
                                        staticBlock.Parent = workspace
                                        
                                        print("✓ Created " .. objectName .. " static tracking block")
                                        Debris:AddItem(staticBlock, 10)
                                    end
                                end
                            else
                                -- Entanglement (Swords): Create static block with EXACT CFrame matching Swords
                                print("⚔️ SWORDS DETECTED! Creating static block matching Swords CFrame exactly...")
                                
                                staticBlock = Instance.new("Part")
                                staticBlock.Name = objectName .. "TrackingBlock"
                                staticBlock.Size = longSize -- Use the same size as longBlock
                                staticBlock.Anchored = true
                                staticBlock.CanCollide = false
                                staticBlock.Material = Enum.Material.ForceField
                                staticBlock.Color = Color3.fromRGB(0, 255, 255) -- Cyan color
                                staticBlock.Transparency = 0.5
                                
                                -- Copy EXACT CFrame from Swords.Core (position + rotation + orientation)
                                staticBlock.CFrame = objectPart.CFrame
                                staticBlock.Parent = workspace
                                
                                print("✓ Created static block matching Swords CFrame exactly")
                                print("  Position:", objectPart.Position)
                                print("  LookVector:", objectPart.CFrame.LookVector)
                                Debris:AddItem(staticBlock, 10)
                            end
                        end
                    end
                end
            end
            
            -- Update loop: rotate blocks to face killer's look direction and manage warning GUI
            local blockUpdateConnection
            blockUpdateConnection = RunService.Heartbeat:Connect(function()
                -- Check for static block spawn
                checkForStaticBlock()
                
                -- Process static block if detected (for both Mass Infection and Entanglement)
                if staticBlockDetected then
                    if staticBlock and staticBlock.Parent then
                        -- Check if player is inside static block
                        local isInsideNow = isLocalPlayerInside(staticBlock)
                        
                        if isInsideNow then
                            -- Player is inside static block
                            createWarningGui()
                            
                            -- Keep playing sound while inside
                            if not soundPlaying then
                                sound:Play()
                                soundPlaying = true
                                lastPlayed = os.clock()
                            else
                                -- Restart sound every 1 second to keep alert active
                                local now = os.clock()
                                if now - lastPlayed >= 1 then
                                    sound:Stop()
                                    sound:Play()
                                    lastPlayed = now
                                end
                            end
                        else
                            -- Player is outside static block
                            destroyWarningGui()
                            if sound and sound.Parent then
                                sound:Stop()
                                soundPlaying = false
                            end
                        end
                        
                        -- Check if static block duration has expired
                        local elapsedTime = os.clock() - staticBlockDetectedTime
                        if elapsedTime >= staticBlockFreezeDuration then
                            print("⏰ Static block ended (5.5s), destroying block")
                            if staticBlock and staticBlock.Parent then
                                staticBlock:Destroy()
                            end
                            destroyWarningGui()
                            if sound and sound.Parent then
                                sound:Stop()
                                soundPlaying = false
                            end
                            if blockUpdateConnection then
                                blockUpdateConnection:Disconnect()
                            end
                            return
                        end
                    else
                        -- Static block destroyed, cleanup
                        destroyWarningGui()
                        if sound and sound.Parent then
                            sound:Stop()
                            soundPlaying = false
                        end
                        if blockUpdateConnection then
                            blockUpdateConnection:Disconnect()
                        end
                        return
                    end
                    -- If Mass Infection, don't process lookvector blocks when static block is active
                    if isMassInfection then
                        return
                    end
                end
                
                -- Normal lookvector block logic (always for Entanglement, or Mass Infection before static block)
                if not longBlock or not longBlock.Parent or not running then 
                    if blockUpdateConnection then
                        blockUpdateConnection:Disconnect()
                    end
                    if staticBlockConnection then
                        staticBlockConnection:Disconnect()
                    end
                    destroyWarningGui()
                    if sound and sound.Parent then
                        sound:Stop()
                        soundPlaying = false
                    end
                    return 
                end
                
                -- Move and rotate blocks based on killer's look direction
                if character then
                    local killerRoot = character:FindFirstChild("HumanoidRootPart")
                    if killerRoot then
                        local killerLook = killerRoot.CFrame.LookVector
                        local directionToUse = Vector3.new(killerLook.X, 0, killerLook.Z).Unit
                        
                        -- Calculate new positions based on killer's current position
                        local rootPos = killerRoot.Position
                        local shortPos = rootPos + directionToUse * (shortBlock.Size.Z / 2)
                        local longPos = rootPos + directionToUse * (longBlock.Size.Z / 2)
                        
                        -- Update CFrames to new positions and face the direction
                        shortBlock.CFrame = CFrame.new(shortPos, shortPos + directionToUse)
                        longBlock.CFrame = CFrame.new(longPos, longPos + directionToUse)
                    end
                end
                
                -- Check if player is inside lookvector blocks
                local insideNow = isLocalPlayerInside(longBlock) or isLocalPlayerInside(shortBlock)
                
                -- For Entanglement, also check static block if it exists
                if not isMassInfection and staticBlock and staticBlock.Parent then
                    insideNow = insideNow or isLocalPlayerInside(staticBlock)
                end
                
                if insideNow then
                    -- Player is inside lookvector blocks
                    createWarningGui()
                    
                    -- Keep playing sound while inside
                    if not soundPlaying then
                        sound:Play()
                        soundPlaying = true
                        lastPlayed = os.clock()
                    else
                        -- Restart sound every 1 second to keep alert active
                        local now = os.clock()
                        if now - lastPlayed >= 1 then
                            sound:Stop()
                            sound:Play()
                            lastPlayed = now
                        end
                    end
                else
                    -- Player is outside lookvector blocks
                    if soundPlaying then
                        sound:Stop()
                        soundPlaying = false
                    end
                    destroyWarningGui()
                end
            end)
        end
    end
end

-- Function to set up listeners for a specific character model
local function setupCharacter(character)
    if not running then return end
    
    -- ONLY monitor the target character
    if character.Name ~= TARGET_KILLER_NAME then
        debugPrint("Skipping non-target character:", character.Name)
        return
    end
    
    if monitoredCharacters[character] then 
        debugPrint("Character already monitored:", character.Name)
        return 
    end
    monitoredCharacters[character] = true
    
    print("✓ Setting up TARGET character:", character.Name)
    debugPrint("  Full path:", character:GetFullName())
    
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not humanoid then 
        debugPrint("  No Humanoid found in character")
        return 
    end
    debugPrint("  Humanoid found:", humanoid)
    
    -- Create animation handler for this specific character
    local onAnimationPlayed = createAnimationHandler(character)
    
    local animator = humanoid:FindFirstChildOfClass("Animator")
    if not animator then
        debugPrint("  No Animator found, waiting for it...")
        -- If animator doesn't exist, wait for it
        local animConnection
        animConnection = humanoid.ChildAdded:Connect(function(child)
            if child:IsA("Animator") then
                debugPrint("  Animator added:", child)
                table.insert(connections, child.AnimationPlayed:Connect(onAnimationPlayed))
                animConnection:Disconnect()
                -- Also check any currently playing tracks right away
                local playingTracks = child:GetPlayingAnimationTracks()
                debugPrint("  Currently playing tracks:", #playingTracks)
                for _, track in ipairs(playingTracks) do
                    onAnimationPlayed(track)
                end
            end
        end)
        table.insert(connections, animConnection)
    else
        debugPrint("  Animator found:", animator)
        table.insert(connections, animator.AnimationPlayed:Connect(onAnimationPlayed))
        -- Fire for tracks already playing
        local playingTracks = animator:GetPlayingAnimationTracks()
        debugPrint("  Currently playing tracks:", #playingTracks)
        for i, track in ipairs(playingTracks) do
            debugPrint("    Track", i, ":", track.Animation.AnimationId)
            onAnimationPlayed(track)
        end
    end
    
    print("✓ Now monitoring animations for:", character.Name)
end

-- Main function to find the killer and connect events
local function main()
    print("========================================")
    print("Animation Detection Script Starting")
    print("Target Killer:", TARGET_KILLER_NAME)
    print("Detecting Animations:")
    print("  - Mass Infection:", MASS_INFECTION_ID)
    print("  - Entanglement:", ENTANGLEMENT_ID)
    print("========================================")
    
    -- Preferred path: workspace.Players.Killers
    local killersFolder = workspace:FindFirstChild("Players")
    if killersFolder then
        killersFolder = killersFolder:FindFirstChild("Killers")
    end

    -- Check preferred path first
    if killersFolder then
        print("✓ Found killers folder at: workspace.Players.Killers")
        local childCount = #killersFolder:GetChildren()
        print("  Found", childCount, "children in Killers folder")
        
        -- Look specifically for 1x1x1x1
        local target = killersFolder:FindFirstChild(TARGET_KILLER_NAME)
        if target then
            print("✓ FOUND TARGET:", TARGET_KILLER_NAME)
            debugPrint("  Full path:", target:GetFullName())
            local humanoid = target:FindFirstChild("Humanoid")
            debugPrint("  Has Humanoid:", humanoid ~= nil)
            if humanoid then
                local animator = humanoid:FindFirstChild("Animator") or humanoid:FindFirstChildOfClass("Animator")
                debugPrint("  Has Animator:", animator ~= nil)
                if animator then
                    local tracks = animator:GetPlayingAnimationTracks()
                    print("  Currently playing", #tracks, "animation(s)")
                    for i, track in ipairs(tracks) do
                        print("    Animation", i, ":", track.Animation.AnimationId)
                    end
                end
            end
        else
            warn("✗ Could not find", TARGET_KILLER_NAME, "in Killers folder!")
            print("  Available children:")
            for _, child in ipairs(killersFolder:GetChildren()) do
                print("    -", child.Name, "(" .. child.ClassName .. ")")
            end
        end
        
        -- ONLY monitor the target model
        local targetModel = killersFolder:FindFirstChild(TARGET_KILLER_NAME)
        if targetModel and targetModel:IsA("Model") and targetModel:FindFirstChildOfClass("Humanoid") then
            setupCharacter(targetModel)
        end
        
        -- Watch for the target model being added (if not already present)
        table.insert(connections, killersFolder.ChildAdded:Connect(function(child)
            if child.Name == TARGET_KILLER_NAME and child:IsA("Model") and child:FindFirstChildOfClass("Humanoid") then
                print("✓ Target model", TARGET_KILLER_NAME, "was added to Killers folder")
                setupCharacter(child)
            end
        end))
    else
        warn("✗ Could not find folder at path: workspace.Players.Killers")
        print("✗ Script will not work without the Killers folder!")
        return
    end
    
    -- Listen for shutdown key
    table.insert(connections, UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if not gameProcessed and input.KeyCode == SHUTDOWN_KEY then
            shutdown()
        end
    end))
    
    print("Animation detection script is running. Press P to shut down.")
end

-- Run the script
main()

